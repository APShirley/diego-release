#!/bin/bash -e

RUN_DIR=/var/vcap/sys/run/bbs
LOG_DIR=/var/vcap/sys/log/bbs
CONF_DIR=/var/vcap/jobs/bbs/config
PIDFILE=$RUN_DIR/bbs.pid
DATA_DIR=/var/vcap/data/bbs
TMP_DIR=$DATA_DIR/tmp

source /var/vcap/packages/pid_utils/pid_utils.sh

<% if p("diego.bbs.etcd.require_ssl") %>
etcd_sec_flags=" \
   -etcdCertFile=${CONF_DIR}/certs/etcd/client.crt \
   -etcdKeyFile=${CONF_DIR}/certs/etcd/client.key \
   -etcdCaFile=${CONF_DIR}/certs/etcd/ca.crt"
<% else %>
etcd_sec_flags=""
<% end %>

<%
  def discover_external_ip
    networks = spec.networks.marshal_dump

    _, network = networks.find do |_name, network_spec|
      network_spec.default
    end

    if !network
      _, network = networks.first
    end

    if !network
      raise "Could not determine IP via network spec: #{networks}"
    end

    network.ip
  end

  my_ip = discover_external_ip
%>

case $1 in

  start)
    pid_guard $PIDFILE "bbs"

    mkdir -p $RUN_DIR
    chown -R vcap:vcap $RUN_DIR

    mkdir -p $LOG_DIR
    chown -R vcap:vcap $LOG_DIR

    mkdir -p $DATA_DIR
    chown -R vcap:vcap $DATA_DIR

    mkdir -p $TMP_DIR
    chown -R vcap:vcap $TMP_DIR

    echo $$ > $PIDFILE

    if running_in_container; then
        echo "Not setting /proc/sys/net/ipv4 parameters, since I'm running inside a linux container"
    else
        # TCP_FIN_TIMEOUT
        # This setting determines the time that must elapse before TCP/IP can release a closed connection and reuse
        # its resources. During this TIME_WAIT state, reopening the connection to the client costs less than establishing
        # a new connection. By reducing the value of this entry, TCP/IP can release closed connections faster, making more
        # resources available for new connections. Addjust this in the presense of many connections sitting in the
        # TIME_WAIT state:

        echo 10 > /proc/sys/net/ipv4/tcp_fin_timeout

        # TCP_TW_REUSE
        # This allows reusing sockets in TIME_WAIT state for new connections when it is safe from protocol viewpoint.
        # Default value is 0 (disabled). It is generally a safer alternative to tcp_tw_recycle

        echo 1 > /proc/sys/net/ipv4/tcp_tw_reuse
    fi

    # Allowed number of open file descriptors
    ulimit -n 100000

    exec chpst -u vcap:vcap /var/vcap/packages/bbs/bin/bbs ${etcd_sec_flags} \
      -address=<%= p("diego.bbs.listen_addr") %> \
      -auctioneerAddress=<%= p("diego.bbs.auctioneer.api_url") %> \
      -debugAddr=<%= p("diego.bbs.debug_addr") %> \
      -consulCluster=http://127.0.0.1:8500 \
      -etcdCluster=<%= p("diego.bbs.etcd.machines").map{|addr| "\"#{p("diego.bbs.etcd.require_ssl") ? "https" : "http"}://#{addr}:4001\""}.join(",")%> \
      -logLevel=<%= p("diego.bbs.log_level") %> \
      2> >(tee -a $LOG_DIR/bbs.stderr.log | logger -p user.error -t vcap.bbs) \
      1> >(tee -a $LOG_DIR/bbs.stdout.log | logger -p user.info -t vcap.bbs)

    ;;

  stop)
    kill_and_wait $PIDFILE

    ;;

  *)
    echo "Usage: bbs_ctl {start|stop}"

    ;;

esac
