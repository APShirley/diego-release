#!/bin/bash -e

RUN_DIR=/var/vcap/sys/run/rep
LOG_DIR=/var/vcap/sys/log/rep
CONF_DIR=/var/vcap/jobs/rep/config

DATA_DIR=/var/vcap/data/executor
CACHE_DIR=<%= p("diego.executor.cache_path") %>

source /var/vcap/packages/pid_utils/pid_utils.sh

<% if p("diego.rep.bbs.require_ssl") %>
  bbs_sec_flags=" \
   -bbsClientCert=${CONF_DIR}/certs/bbs/client.crt \
   -bbsClientKey=${CONF_DIR}/certs/bbs/client.key \
   -bbsCACert=${CONF_DIR}/certs/bbs/ca.crt"

  bbs_api_url="<%= "https://" + p("diego.rep.bbs.api_location") %>"
<% else %>
  bbs_sec_flags=""
  bbs_api_url="<%= "http://" + p("diego.rep.bbs.api_location") %>"
<% end %>

case $1 in

  start)
    index=$2
    job_name="rep-${index}"
    cell_id=<%= spec.job.name %>-<%= spec.index %>-$index
    if [ -z ${index} ]; then
      index=0
      job_name="rep"
      cell_id=<%= spec.job.name %>-<%= spec.index %>
    fi

    PIDFILE=$RUN_DIR/${job_name}.pid

    pid_guard $PIDFILE ${job_name}

    mkdir -p $RUN_DIR
    chown -R vcap:vcap $RUN_DIR

    mkdir -p $LOG_DIR
    chown -R vcap:vcap $LOG_DIR

    mkdir -p $DATA_DIR
    chown -R vcap:vcap $DATA_DIR

    mkdir -p $CACHE_DIR
    chown -R vcap:vcap $CACHE_DIR

    if running_in_container; then
        echo "Not setting /proc/sys/net/ipv4 parameters, since I'm running inside a linux container"
    else
        # TCP_FIN_TIMEOUT
        # This setting determines the time that must elapse before TCP/IP can release a closed connection and reuse
        # its resources. During this TIME_WAIT state, reopening the connection to the client costs less than establishing
        # a new connection. By reducing the value of this entry, TCP/IP can release closed connections faster, making more
        # resources available for new connections. Addjust this in the presense of many connections sitting in the
        # TIME_WAIT state:

        echo 10 > /proc/sys/net/ipv4/tcp_fin_timeout

        # TCP_TW_REUSE
        # This allows reusing sockets in TIME_WAIT state for new connections when it is safe from protocol viewpoint.
        # Default value is 0 (disabled). It is generally a safer alternative to tcp_tw_recycle

        echo 1 > /proc/sys/net/ipv4/tcp_tw_reuse

        # load conntrack module
        modprobe ip_conntrack

        # NF_CONNTRACK_MAX
        # Default value is 65536. We set it to a larger number to avoid running out of connections.
        echo 262144 > /proc/sys/net/netfilter/nf_conntrack_max
    fi

    # Allowed number of open file descriptors
    ulimit -n 100000

    # Enable maximum OS thread concurrency
    export GOMAXPROCS=$(nproc)

    # Work around for GOLANG 1.5.3 DNS bug
    export GODEBUG=netdns=cgo

    LISTEN_PORT=1800
    DEBUG_PORT=17008
    TMP_DIR=$DATA_DIR/tmp-$job_name

    mkdir -p $TMP_DIR
    chown -R vcap:vcap $TMP_DIR

    chpst -u vcap:vcap /var/vcap/packages/rep/bin/rep ${bbs_sec_flags} \
      -bbsAddress=${bbs_api_url} \
      <% if_p("diego.rep.bbs.client_session_cache_size") do |value| %> \
        -bbsClientSessionCacheSize=<%= value %> \
      <% end %> \
      <% if_p("diego.rep.bbs.max_idle_conns_per_host") do |value| %> \
        -bbsMaxIdleConnsPerHost=<%= value %> \
      <% end %> \
      -dropsondePort=<%= p("diego.rep.dropsonde_port") %> \
      -consulCluster=http://127.0.0.1:8500 \
      -debugAddr=0.0.0.0:$(( $DEBUG_PORT + $index )) \
      -listenAddr=0.0.0.0:$(( $LISTEN_PORT + $index )) \
      <%= p("diego.rep.preloaded_rootfses").map { |rootfs| "-preloadedRootFS #{rootfs}" }.join(" ") %> \
      <%= p("diego.rep.rootfs_providers").map { |provider| "-rootFSProvider #{provider}" }.join(" ") %> \
      -cellID=$cell_id \
      -zone=<%= p("diego.rep.zone") %> \
      -pollingInterval=<%= "#{p("diego.rep.polling_interval_in_seconds")}s" %> \
      -evacuationPollingInterval=<%= "#{p("diego.rep.evacuation_polling_interval_in_seconds")}s" %> \
      -evacuationTimeout=<%= "#{p("diego.rep.evacuation_timeout_in_seconds")}s" %> \
      -skipCertVerify=<%= p("diego.ssl.skip_cert_verify") %> \
      -gardenNetwork=<%= p("diego.executor.garden.network") %> \
      -gardenAddr=<%= p("diego.executor.garden.address") %> \
      -memoryMB=<%= p("diego.executor.memory_capacity_mb") %> \
      -diskMB=<%= p("diego.executor.disk_capacity_mb") %> \
      -containerInodeLimit=<%= p("diego.executor.container_inode_limit") %> \
      -containerMaxCpuShares=<%= p("diego.executor.container_max_cpu_shares") %> \
      -containerOwnerName=$cell_id \
      -cachePath=$CACHE_DIR \
      -maxCacheSizeInBytes=<%= p("diego.executor.max_cache_size_in_bytes") %>\
      -exportNetworkEnvVars=<%= p("diego.executor.export_network_env_vars") %>\
      -healthyMonitoringInterval=<%= "#{p("diego.executor.healthy_monitoring_interval_in_seconds")}s" %> \
      -unhealthyMonitoringInterval=<%= "#{p("diego.executor.unhealthy_monitoring_interval_in_seconds")}s" %> \
      -createWorkPoolSize=<%= p("diego.executor.create_work_pool_size") %> \
      -deleteWorkPoolSize=<%= p("diego.executor.delete_work_pool_size") %> \
      -readWorkPoolSize=<%= p("diego.executor.read_work_pool_size") %> \
      -metricsWorkPoolSize=<%= p("diego.executor.metrics_work_pool_size") %> \
      -healthCheckWorkPoolSize=<%= p("diego.executor.healthcheck_work_pool_size") %> \
      -maxConcurrentDownloads=<%= p("diego.executor.max_concurrent_downloads") %> \
      -tempDir=$TMP_DIR \
      -logLevel=<%= p("diego.rep.log_level") %> \
      -gardenHealthcheckInterval=<%= p("diego.executor.garden_healthcheck.interval") %> \
      -gardenHealthcheckTimeout=<%= p("diego.executor.garden_healthcheck.timeout") %> \
      -gardenHealthcheckCommandRetryPause=<%= p("diego.executor.garden_healthcheck.command_retry_pause") %> \
      -gardenHealthcheckProcessPath=<%= p("diego.executor.garden_healthcheck.process.path") %> \
      -gardenHealthcheckProcessUser=<%= p("diego.executor.garden_healthcheck.process.user") %> \
      <% if_p("diego.executor.garden_healthcheck.process.dir") do |value| %> \
        -gardenHealthcheckProcessDir=<%= value %> \
      <% end %> \
      <% if_p("diego.executor.garden_healthcheck.process.args") do |value| %> \
        -gardenHealthcheckProcessArgs=<%= Shellwords.shellescape(value) %> \
      <% end %> \
      <% if_p("diego.executor.garden_healthcheck.process.env") do |value| %> \
        -gardenHealthcheckProcessEnv=<%= Shellwords.shellescape(value) %> \
      <% end %> \
      <% if_p("diego.executor.post_setup_user") do |value| %> \
        -postSetupUser=<%= value %> \
      <% end %> \
      <% if_p("diego.executor.post_setup_hook") do |value| %> \
        -postSetupHook=<%= Shellwords.shellescape(value) %> \
      <% end %> \
      2>> $LOG_DIR/$job_name.stderr.log \
      1> >(tee -a $LOG_DIR/$job_name.stdout.log | logger -t vcap.$job_name) &

    pid=$!

    set +e

    address=localhost:$LISTEN_PORT
    start=`date +%s`
    # wait up to 25 seconds (monit gives us 30 -- defined on the monit script)
    while [ $(( $(date +%s) - 25 )) -lt $start ]; do
      if curl --fail --silent http://$address/ping >/dev/null 2>&1
      then
        echo $pid > $PIDFILE
        break
      fi
      sleep 1
    done

    if [ -f $PIDFILE ]; then
      wait $(cat $PIDFILE)
    else
      echo "$(date) rep did not start in time"
      echo $pid > ${PIDFILE}.fail
      kill_and_wait ${PIDFILE}.fail
    fi

    ;;

  stop)
    index=$2
    job_name="rep-${index}"
    if [ -z ${index} ]; then
      index=0
      job_name="rep"
    fi

    PIDFILE=$RUN_DIR/${job_name}.pid

    kill_and_wait $PIDFILE

    ;;

  *)
    echo "Usage: rep_ctl {start|stop} index"

    ;;

esac
